<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<title>Ansible configurator</title>
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css" />
		<!-- Remove .disabled when all categories/modules will be covered -->
		<style type="text/css">
			.js-categories-list li.list-group-item:not(.disabled):hover,
			.js-modules-list li.list-group-item:not(.disabled):hover {
				cursor: pointer;
			}
		</style>
	</head>
	<body>
		<div class="container-fluid">
			<div class="row">
				<div class="col-md-2 js-categories-list">
					<ul class="list-group list-unstyled">
						<!-- Populated from JavaScript -->
					</ul>
				</div>
				<div class="col-md-3 hidden js-modules-list">
					<ul class="list-group list-unstyled">
						<!-- Populated from JavaScript -->
					</ul>
				</div>
				<div class="col-md-3 hidden js-module-options-list">
					<ul class="list-group list-unstyled">
						<li class="list-group-item">
							<span class="js-module-option-name">chdir</span> <input type="text" class="js-module-option-text-value" autocomplete="off" />
						</li>
						<li class="list-group-item">
							<span class="js-module-option-name">creates</span> <input type="text" class="js-module-option-text-value" autocomplete="off" />
						</li>
						<li class="list-group-item">
							<span class="js-module-option-name">executable</span> <input type="text" class="js-module-option-text-value" autocomplete="off" />
						</li>
						<li class="list-group-item">
							<span class="js-module-option-name">removes</span> <input type="text" class="js-module-option-text-value" autocomplete="off" />
						</li>
						<li class="list-group-item">
							<span class="js-module-option-name">warn</span> <input type="checkbox" checked />
						</li>
					</ul>
				</div>
				<div class="col-md-4 hidden js-result-command">
					<textarea class="js-result-textarea" rows="20" cols="50">
					</textarea>
				</div>
			</div>
		</div>

		<script src="http://yastatic.net/jquery/2.1.1/jquery.min.js"></script>
		<script src="http://cdnjs.cloudflare.com/ajax/libs/lodash.js/2.4.1/lodash.underscore.min.js"></script>
		<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
		<script>
			$(document).ready(function() {
				// data
				var modulesData = [
					{
						title: 'Cloud Modules',
						modules: [
						]
					},
					{
						title: 'Commands Modules',
						modules: [
							{
								name: 'command',
								description: 'Executes a command on a remote node',
								options: [
								]
							},
							{
								name: 'raw',
								description: 'Executes a low-down and dirty SSH command',
								options: [
								]
							},
							{
								name: 'script',
								description: 'Runs a local script on a remote node after transferring it',
								options: [
								]
							},
							{
								name: 'shell',
								description: 'Execute commands in nodes',
								options: [
								]
							}
						]
					},
					{
						title: 'Database Modules',
						modules: [
						]
					},
					{
						title: 'Files Modules',
						modules: [
						]
					},
					{
						title: 'Inventory Modules',
						modules: [
							{
								name: 'add_host',
								description: 'Add a host (and alternatively a group) to the ansible-playbook in-memory inventory',
								options: [
								]
							},
							{
								name: 'group_by',
								description: 'Create Ansible groups based on facts',
								options: [
								]
							}
						]
					},
					{
						title: 'Messaging Modules',
						modules: [
							{
								name: 'rabbitmq_parameter',
								description: 'Adds or removes parameters to RabbitMQ',
								options: [
								]
							},
							{
								name: 'rabbitmq_plugin',
								description: 'Adds or removes plugins to RabbitMQ',
								options: [
								]
							},
							{
								name: 'rabbitmq_policy',
								description: 'Manage the state of policies in RabbitMQ',
								options: [
								]
							},
							{
								name: 'rabbitmq_user',
								description: 'Adds or removes users to RabbitMQ',
								options: [
								]
							},
							{
								name: 'rabbitmq_vhost',
								description: 'Manage the state of a virtual host in RabbitMQ',
								options: [
								]
							}
						]
					},
					{
						title: 'Monitoring Modules',
						modules: [
						]
					},
					{
						title: 'Network Modules',
						modules: [
						]
					},
					{
						title: 'Notification Modules',
						modules: [
						]
					},
					{
						title: 'Packaging Modules',
						modules: [
							{
								name: 'apt',
								description: 'Manages apt-packages',
								options: [
								]
							},
							{
								name: 'apt_key',
								description: 'Add or remove an apt key',
								options: [
								]
							},
							{
								name: 'apt_repository',
								description: 'Add and remove APT repositories',
								options: [
								]
							},
							{
								name: 'apt_rpm',
								description: 'apt_rpm package manager',
								options: [
								]
							},
							{
								name: 'composer',
								description: 'Dependency Manager for PHP',
								options: [
								]
							},
							{
								name: 'cpanm',
								description: 'Manages Perl library dependencies',
								options: [
								]
							},
							{
								name: 'easy_install',
								description: 'Installs Python libraries',
								options: [
								]
							},
							{
								name: 'gem',
								description: 'Manage Ruby gems',
								options: [
								]
							},
							{
								name: 'homebrew',
								description: 'Package manager for Homebrew',
								options: [
								]
							},
							{
								name: 'homebrew_cask',
								description: 'Install/uninstall homebrew casks',
								options: [
								]
							},
							{
								name: 'homebrew_tap',
								description: 'Tap a Homebrew repository',
								options: [
								]
							},
							{
								name: 'layman',
								description: 'Manage Gentoo overlays',
								options: [
								]
							},
							{
								name: 'macports',
								description: 'Package manager for MacPorts',
								options: [
								]
							},
							{
								name: 'npm',
								description: 'Manage node.js packages with npm',
								options: [
								]
							},
							{
								name: 'openbsd_pkg',
								description: 'Manage packages on OpenBSD',
								options: [
								]
							},
							{
								name: 'opkg',
								description: 'Package manager for OpenWrt',
								options: [
								]
							},
							{
								name: 'pacman',
								description: 'Manage packages with pacman',
								options: [
								]
							},
							{
								name: 'pip',
								description: 'Manages Python library dependencies',
								options: [
								]
							},
							{
								name: 'pkgin',
								description: 'Package manager for SmartOS',
								options: [
								]
							},
							{
								name: 'pkgng',
								description: 'Package manager for FreeBSD >= 9.0',
								options: [
								]
							},
							{
								name: 'pkgutil',
								description: 'Manage CSW-Packages on Solaris',
								options: [
								]
							},
							{
								name: 'portage',
								description: 'Package manager for Gentoo',
								options: [
								]
							},
							{
								name: 'portinstall',
								description: 'Installing packages from FreeBSDâ€™s ports system',
								options: [
								]
							},
							{
								name: 'redhat_subscription',
								description: 'Manage Red Hat Network registration and subscriptions using the subscription-manager command',
								options: [
								]
							},
							{
								name: 'rhn_channel',
								description: 'Adds or removes Red Hat software channels',
								options: [
								]
							},
							{
								name: 'rhn_register',
								description: 'Manage Red Hat Network registration using the rhnreg_ks command',
								options: [
								]
							},
							{
								name: 'rpm_key',
								description: 'Adds or removes a gpg key from the rpm db',
								options: [
								]
							},
							{
								name: 'svr4pkg',
								description: 'Manage Solaris SVR4 packages',
								options: [
								]
							},
							{
								name: 'swdepot',
								description: 'Manage packages with swdepot package manager (HP-UX)',
								options: [
								]
							},
							{
								name: 'urpmi',
								description: 'Urpmi manager',
								options: [
								]
							},
							{
								name: 'yum',
								description: 'Manages packages with the yum package manager',
								options: [
								]
							},
							{
								name: 'zypper',
								description: 'Manage packages on SUSE and openSUSE',
								options: [
								]
							},
							{
								name: 'zypper_repository',
								description: 'Add and remove Zypper repositories',
								options: [
								]
							}
						]
					},
					{
						title: 'Source Control Modules',
						modules: [
							{
								name: 'bzr',
								description: 'Deploy software (or files) from bzr branches',
								options: [
								]
							},
							{
								name: 'git',
								description: 'Deploy software (or files) from git checkouts',
								options: [
								]
							},
							{
								name: 'github_hooks',
								description: 'Manages github service hooks',
								options: [
								]
							},
							{
								name: 'hg',
								description: 'Manages Mercurial (hg) repositories',
								options: [
								]
							},
							{
								name: 'subversion',
								description: 'Deploys a subversion repository',
								options: [
								]
							}
						]
					},
					{
						title: 'System Modules',
						modules: [
						]
					},
					{
						title: 'Utilities Modules',
						modules: [
						]
					},
					{
						title: 'Web Infrastructure Modules',
						modules: [
							{
								name: 'apache2_module',
								description: 'Enables/disables a module of the Apache2 webserver',
								options: [
								]
							},
							{
								name: 'django_manage',
								description: 'Manages a Django application',
								options: [
								]
							},
							{
								name: 'ejabberd_user',
								description: 'Manages users for ejabberd servers',
								options: [
								]
							},
							{
								name: 'htpasswd',
								description: 'Manages user files for basic authentication',
								options: [
								]
							},
							{
								name: 'jboss',
								description: 'Deploys applications to JBoss',
								options: [
								]
							},
							{
								name: 'jira',
								description: 'Create and modify issues in a JIRA instance',
								options: [
								]
							},
							{
								name: 'supervisorctl',
								description: 'Manage the state of a program or group of programs running via supervisord',
								options: [
								]
							}
						]
					},
					{
						title: 'Windows Modules',
						modules: [
							{
								name: 'win_feature',
								description: 'Installs and uninstalls Windows Features',
								options: [
								]
							},
							{
								name: 'win_get_url',
								description: 'Fetches a file from a given URL',
								options: [
								]
							},
							{
								name: 'win_group',
								description: 'Add and remove local groups',
								options: [
								]
							},
							{
								name: 'win_msi',
								description: 'Installs and uninstalls Windows MSI files',
								options: [
								]
							},
							{
								name: 'win_ping',
								description: 'A windows version of the classic ping module',
								options: [
								]
							},
							{
								name: 'win_service',
								description: 'Manages Windows services',
								options: [
								]
							},
							{
								name: 'win_stat',
								description: 'Returns information about a Windows file',
								options: [
								]
							},
							{
								name: 'win_user',
								description: 'Manages local Windows user accounts',
								options: [
								]
							}
						]
					}
				];

				// helpers

				var getEntryName = function(elem) {
					return $('span', elem).first().text();
				};

				var highlightMenuEntry = function(elem, clearOtherEntries) {
					if (clearOtherEntries) {
						$(elem).siblings('.list-group-item-info').removeClass('list-group-item-info');
					}
					$(elem).addClass('list-group-item-info');
				};

				var unhighlightMenuEntry = function(elem) {
					$(elem).removeClass('list-group-item-info');
				};

				var unhighlightAllMenuEntriesInsideDiv = function(selector) {
					$(selector + ' .list-group-item-info').removeClass('list-group-item-info');
				};

				var regenerateYamlDocument = function() {
					$('.js-result-textarea').html(generateYamlCommand());
				};

				var getModulesListOfCategory = function(categoryName) {
					var category = _.find(modulesData, function(elem) {
						return elem.title == categoryName;
					});

					return _.pluck(category.modules, 'name');
				};

				var showModulesList = function(elem) {
					unhighlightAllMenuEntriesInsideDiv('.js-modules-list');

					var modules = getModulesListOfCategory(getEntryName(elem));
					$('.js-modules-list ul').html(createEntries(modules, 'js-module-name'));
					registerEventsForModulesList();
					$('.js-modules-list').removeClass("hidden");
				};

				var showModuleOptionsList = function() {
					clearModuleOptionsValues();
					unhighlightAllMenuEntriesInsideDiv('.js-module-options-list');

					$('.js-module-options-list').removeClass('hidden');
				};

				var hideModuleOptionsList = function() {
					$('.js-module-options-list').addClass('hidden');
				};

				var clearModuleOptionsValues = function() {
					$('.js-module-options-list .js-module-option-text-value').val('');
				};

				var clearModuleOptionValue = function(elem) {
					$('.js-module-option-text-value', elem).val('');
				};

				var showYamlDocument = function() {
					regenerateYamlDocument();

					$('.js-result-command').removeClass('hidden');
				};

				var hideYamlDocument = function() {
					$('.js-result-command').addClass('hidden');
				};

				var getCategoriesList = function() {
					return modulesData;
					// TODO: uncomment when all categories will be covered
					//return _.pluck(modulesData, 'title');
				};

				var createEntries = function(names, elemClassName) {
					// TODO: remove 'disable' when all categories will be covered
					return _.map(names, function(elemName) {
						var disabledClass = !_.isUndefined(elemName.modules) && elemName.modules.length == 0 ? ' disabled' : '';
						return '<li class="list-group-item' + disabledClass + '">'
								+ '<span class="' + elemClassName + '">'
									+ (elemName.title || elemName) // TODO: remove title when all categories will be covered
								+ '</span>'
							+ '</li>';
					});
				};

				var showCategoriesList = function() {
					$('.js-categories-list ul').html(createEntries(getCategoriesList(), 'js-category-name'));
					registerEventsForCategoriesList();
				};

				var registerEventsForCategoriesList = function() {
					/// TODO: remove 'disabled' when all categories will be covered
					$('.js-categories-list li.list-group-item:not(.disabled)')
						.hover(function() {
							$(this).toggleClass('active');
						})
						.click(function(e) {
							$(this).trigger('app:category-selected');
						});
				};

				var registerEventsForModulesList = function() {
					$('.js-modules-list li.list-group-item')
						.hover(function() {
							$(this).toggleClass('active');
						})
						.click(function() {
							$(this).trigger('app:module-selected');
						});
				};

				var registerEventsForModuleOptionsList = function() {
					$('.js-module-option-text-value').change(function(event) {
						if ($(event.target).val() === '') {
							$(this).parent('.list-group-item').trigger('app:module-option-unselected');
						} else {
							$(this).parent('.list-group-item').trigger('app:module-option-selected');
						}
					});
				};

				// define callbacks

				var onCategorySelection = function(event) {
					highlightMenuEntry(event.target, true);
					hideModuleOptionsList();
					hideYamlDocument();
					showModulesList(event.target);
				};

				var onModuleSelection = function(event) {
					highlightMenuEntry(event.target, true);
					showModuleOptionsList();
					showYamlDocument();
				};

				var onModuleOptionSelection = function(event) {
					highlightMenuEntry(event.target);
					regenerateYamlDocument();
				};

				var onModuleOptionUnselection = function(event) {
					unhighlightMenuEntry(event.target);
					clearModuleOptionValue(event.target);
					regenerateYamlDocument();
				};

				// bind callbacks

				$(document).bind('app:category-selected', onCategorySelection);
				$(document).bind('app:module-selected', onModuleSelection);
				$(document).bind('app:module-option-selected', onModuleOptionSelection);
				$(document).bind('app:module-option-unselected', onModuleOptionUnselection);

				// other

				var generateYamlCommand = function() {
					var moduleName = $('.js-modules-list .list-group-item-info .js-module-name').text();
					var moduleOptions = [];
					$('.js-module-options-list .list-group-item-info').each(function(el) {
						var option = $('.js-module-option-name', this).text() + ': ' + $('.js-module-option-text-value', this).val();
						moduleOptions.push(option);
					});
					return moduleName + ":\n  " + moduleOptions.join("\n  ");
				};

				// start

				showCategoriesList();
			});
		</script>
	</body>
</html>

